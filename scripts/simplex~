#to implement the simplex algorithm

num n m temp1 temp2 # n for variables, m for equations
num i j
disp "Enter the number of variables, n, in the system:\n"
inp n

disp "Enter the number of (in)equations, m, in the system:\n"
inp m

mat a[m+2][m+n+2]

disp "m= " m " n= " n

disp "Enter  a1, a2, ... , an in the objective equation as z+a1x1+a2x2+...+anxn=0:\n"
temp1=n+1
inp a[2][2:temp1]

disp "\nEnter the coefficients of the variables in the (in)equations:\n"
temp2=m+2
inp a[3:temp2][2:temp1]

disp "\nEnter the right hand side of each (in)equation:\n"
inp a[3:temp2][m+n+2]

disp "\nEnter the type of each equation(1 for <=, 0 for =, and -1 for >=):\n"
i=n+2
while(i<=n+m+1)
 {
   temp1=i-n+1
   inp a[temp1][i]   
   i=i+1
 }

#to initialise the 1st row and columns in the matrix
j=2
while(j<=m+n+1)
 {
   a[1][j]=j
  # disp a[1][j]
   j=j+1
 }

i=3
while(i<=m+2)
 {
   a[i][1]=n+i-1  
   i=i+1
 }

num p_type

disp "\nEnter the type of problem (1 for maximize and -1 for minimize):"
inp p_type

num ecol lrow found min_incept incept pivot min_coff coff

found=0
#disp a
while(!found)
 {
  
   #to find the entering column
   min_coff=0
   j=2
   while(j<=m+n+1)
    {
      coff = p_type*a[2][j]
      
      if(coff<0)
       {
         if(min_coff>=0 | coff<min_coff) 
          {
            ecol=j
            min_coff=coff
          }
       }
      j=j+1
    }
   
   if(min_coff>=0)
    {
      found=1
    }
   else
    {
      #to find the leaving row
      lrow=3
      min_incept=0
      i=3 
      while(i<=m+2)
       {
         if(a[i][ecol]!=0)
          {
            temp2=a[i][ecol]
            incept=a[i][m+n+2]/temp2
            if(incept>0)
             {
               if(min_incept<=0 | incept<min_incept)
                {
                  lrow=i
                  min_incept=incept
                }
             }            
          }
         i=i+1
       }
      
      if(min_incept<=0) #solution has been found since there is no entering variable
        found=2
      else
       { 
         #apply Gauss-Jordan row transformations to arrive at the matrix for the next iteration
         #disp "\nlrow=" lrow " ecol=" ecol 
         a[lrow][1]=ecol
         
         pivot=a[lrow][ecol] #the pivot element
         
         temp2=m+n+2
         a[lrow][2:temp2]=a[lrow][2:temp2]/pivot
         
         i=2
         while(i<=m+2)
          {
            if(i!=lrow)
             {
               temp2=m+n+2
               temp1=a[i][ecol]
               a[i][2:temp2]=a[i][2:temp2]-temp1*a[lrow][2:temp2]
             }
            i=i+1
          }
         #disp a
       } # we now proceed to the next iteration
    }
   
 } 

if(!found)
  disp "\nThe solution of the given problem does not exist"
else
 {
   #we now print the solution
   mat soln[n+1][1]

   soln[1]=a[2][m+n+2]
   i=3
   while(i<=m+2)
    {
      if(a[i][1]<=n+1)
       {
         temp1=a[i][1]
         soln[temp1]=a[i][m+n+2]
       }
      i=i+1
    }

   disp "\nThe solution of the simplex algorithm is:\n"
   temp1=soln[1][1]
   disp "Z = " temp1
   i=2
   while(i<=n+1)
    {
      temp2=i-1
      temp1=soln[i]
      disp "\nx" temp2 " = " temp1
      i=i+1
    }
 }   
